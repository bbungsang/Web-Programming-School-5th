"""
Django settings for make-instargram project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# root directory 설정
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# templates 설정
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')

# static 설정
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [STATIC_DIR]
STATIC_URL = '/static/'

# media 경로 설정
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Custom User
AUTH_USER_MODEL = 'member.User'
LOGIN_URL = 'member:login'


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_fmn3e$&m^t#zre^k7uw&dem&0pg03v_b1(pa%zrdhb5f=2ro+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Applications
    'post',
    'member',

    # plug-in
    'django_extensions',

    # OAuth
    'django.contrib.sites', # 장고에서 기본으로 제공해주는 앱으로서, 같은 엔진을 쓰지만 여러 개의 도매인을 사용할 수 있도록 함, allauth 가 django sites 를 사용하여 개발하도록 가졍하였기 때문에 반드시 추가해야할 부분이다.
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.naver',

]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # 인증을 처리하는 기본 백엔드
    'allauth.account.auth_backends.AuthenticationBackend', # 추가 인증 백엔드
]

# default SITE id, 등록하지 않으면 매 요청 시에 host 명의 Site 인스턴스를 찾는다.
SITE_ID = 1

# 이메일 확인 제거 아니면 직접 SMTP 설정을 해야한다.
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATE_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True
